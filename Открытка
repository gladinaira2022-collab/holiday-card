<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Warm & Fun Holiday Card (for kids!)</title>
  <style>
    :root{--bg:#f7f9ff;--card:#ffffff;--accent:#ff6b81;--muted:#9aa7c7}
    html,body{height:100%;margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto,'Helvetica Neue',Arial}
    .app{min-height:100vh;display:flex;align-items:center;justify-content:center;background:linear-gradient(180deg,#cfe8ff 0%,#f7f9ff 70%);padding:28px}
    .stage{width:980px;max-width:100%;display:grid;grid-template-columns:260px 1fr;gap:20px}

    /* left palette */
    .palette{background:rgba(255,255,255,0.95);border-radius:16px;padding:12px;box-shadow:0 8px 30px rgba(20,30,60,0.08)}
    .palette h2{font-size:16px;margin:6px 8px;color:#244}
    .items{display:flex;flex-wrap:wrap;gap:8px;padding:8px}
    .item{width:64px;height:64px;display:flex;align-items:center;justify-content:center;border-radius:12px;background:linear-gradient(180deg,#fff,#f0f6ff);cursor:grab;border:2px dashed rgba(0,0,0,0.04);box-shadow:0 4px 10px rgba(20,30,60,0.04);user-select:none}
    .item:active{cursor:grabbing}
    .controls{margin-top:8px;padding:8px}
    .btn{display:inline-block;padding:8px 12px;border-radius:12px;background:linear-gradient(180deg,#fffc, #fff);border:1px solid rgba(0,0,0,0.06);cursor:pointer;margin-right:8px}

    /* card */
    .card-wrap{position:relative;border-radius:18px;padding:18px;background:linear-gradient(180deg,#ffffffee,#f7fbff);box-shadow:0 18px 40px rgba(18,30,70,0.12);overflow:hidden}
    .card{position:relative;width:100%;height:640px;border-radius:12px;background:linear-gradient(180deg,#fffbf6 0%,#fff 60%);border:6px solid #f2f6ff;box-shadow:inset 0 1px 0 rgba(255,255,255,0.6)}
    .card-header{position:absolute;left:18px;top:18px;font-weight:700;color:#244}
    .message{position:absolute;left:18px;bottom:18px;right:18px;font-size:20px;color:#264;padding:12px;background:linear-gradient(180deg,#fff0,#fff0);border-radius:12px}

    /* placed items */
    .scene{position:relative;width:100%;height:100%;overflow:hidden}
    .placed{position:absolute;touch-action:none;user-select:none;transform-origin:center center;transition:transform 120ms ease}
    .placed img,.placed svg{width:100%;height:100%;display:block;pointer-events:none}
    .hint{position:absolute;right:14px;top:14px;background:rgba(255,255,255,0.85);padding:6px 10px;border-radius:12px;font-size:13px;color:#556}

    /* snow */
    .snowflake{position:absolute;top:-40px;pointer-events:none;font-size:20px;will-change:transform,opacity}

    /* resize/rotate hint */
    .tip{position:absolute;left:18px;top:56px;font-size:13px;color:var(--muted)}

    /* footer sounds */
    .footer{margin-top:10px;display:flex;gap:8px;align-items:center}

    /* small responsive */
    @media(max-width:880px){.stage{grid-template-columns:1fr;}
      .card{height:520px}
    }
  </style>
</head>
<body>
  <div class="app">
    <div class="stage">
      <div class="palette">
        <h2>Holiday toys & stickers</h2>
        <div class="items" id="palette">
          <!-- draggable items (SVG/emoji) -->
          <div class="item" draggable="true" data-type="ornament" title="Ornament">üéÑ</div>
          <div class="item" draggable="true" data-type="star" title="Star">‚≠ê</div>
          <div class="item" draggable="true" data-type="gift" title="Gift">üéÅ</div>
          <div class="item" draggable="true" data-type="penguin" title="Penguin">üêß</div>
          <div class="item" draggable="true" data-type="snowman" title="Snowman">‚õÑ</div>
          <div class="item" draggable="true" data-type="candy" title="Candy">üç¨</div>
          <div class="item" draggable="true" data-type="heart" title="Heart">üíñ</div>
          <div class="item" draggable="true" data-type="bell" title="Bell">üîî</div>
        </div>

        <div class="controls">
          <div class="btn" id="jingleBtn">Play jingle</div>
          <div class="btn" id="clearBtn">Clear items</div>
          <div class="btn" id="confettiBtn">Surprise!</div>
          <div style="margin-top:8px;font-size:13px;color:var(--muted)">Tips: drag items onto the card. Double-click to rotate. Scroll to resize.</div>
        </div>

      </div>

      <div class="card-wrap">
        <div class="card" id="card">
          <div class="card-header">A Warm Holiday from Us!</div>
          <div class="hint">Drag & Drop decorations ‚ú®</div>
          <div class="tip">Double-click an item to spin ‚Äî scroll to resize</div>

          <div class="scene" id="scene">
            <!-- default placed items -->
            <div class="placed" data-id="placed-1" style="left:40px;bottom:80px;width:120px;height:120px;transform:rotate(-6deg)">
              <div style="font-size:86px;text-align:center;line-height:1">üéÅ</div>
            </div>
            <div class="placed" data-id="placed-2" style="right:60px;bottom:60px;width:140px;height:140px;transform:rotate(4deg)">
              <div style="font-size:96px;text-align:center;line-height:1">‚õÑ</div>
            </div>
            <div class="placed" data-id="placed-3" style="left:220px;top:120px;width:64px;height:64px;transform:rotate(0deg)">
              <div style="font-size:48px;text-align:center;line-height:1">‚≠ê</div>
            </div>

            <!-- snow container --><!-- snow flakes generated by JS -->
          </div>

          <div class="message" id="message">Wishing you giggles, cocoa, and snowy adventures! ‚ùÑÔ∏è</div>
        </div>

        <div class="footer">
          <small style="color:#446">Click decorations to hear a sound ‚Äî kids-friendly synth sounds used.</small>
        </div>
      </div>
    </div>
  </div>

<script>
// --- small helper utilities ---
const scene = document.getElementById('scene');
const palette = document.getElementById('palette');
let draggedType = null;

// WebAudio simple sound generator (child-friendly tones)
const AudioCtx = window.AudioContext || window.webkitAudioContext;
const audio = new AudioCtx();
function playTone(freq=440,duration=0.18,type='sine',when=0){
  const o = audio.createOscillator();
  const g = audio.createGain();
  o.type = type; o.frequency.value = freq; g.gain.value = 0.0001;
  o.connect(g); g.connect(audio.destination);
  const t = audio.currentTime + when;
  g.gain.setValueAtTime(0.0001,t);
  g.gain.exponentialRampToValueAtTime(0.12,t+0.02);
  o.start(t);
  g.gain.exponentialRampToValueAtTime(0.0001,t+duration);
  o.stop(t+duration+0.02);
}
function playDropSound(){playTone(520,0.18,'sine');playTone(760,0.14,'triangle',0.05)}
function playClickSound(){playTone(720,0.08,'square');}
function playClearSound(){playTone(220,0.35,'sine');}
function playHappyChord(){playTone(520,0.18);playTone(660,0.18,'square',0.02);playTone(880,0.12,'triangle',0.04);} 

// Jingle (simple sequence)
const jinglePattern = [ {f:520,d:0.16},{f:660,d:0.16},{f:880,d:0.34},{f:660,d:0.18},{f:520,d:0.34} ];
function playJingle(){ let t=0; for(const p of jinglePattern){ playTone(p.f,p.d,'sine',t); t+=p.d+0.02; } }

document.getElementById('jingleBtn').addEventListener('click', ()=>{ playJingle(); });

// Drag from palette
palette.addEventListener('dragstart',(ev)=>{ const t = ev.target.getAttribute('data-type'); draggedType = t; ev.dataTransfer.setData('text/plain', t); ev.dataTransfer.effectAllowed='copy';});

scene.addEventListener('dragover',(ev)=>{ ev.preventDefault(); ev.dataTransfer.dropEffect='copy'; });
scene.addEventListener('drop',(ev)=>{
  ev.preventDefault(); const type = ev.dataTransfer.getData('text/plain') || draggedType; if(!type) return;
  const rect = scene.getBoundingClientRect();
  const x = ev.clientX - rect.left; const y = ev.clientY - rect.top;
  placeItem(type,x,y);
  playDropSound();
});

// Place an item into the scene (type, position)
let idCounter = 100;
function placeItem(type,x,y,opts={w:80,h:80,rot: (Math.random()-0.5)*20}){
  const el = document.createElement('div');
  const id = 'placed-'+(++idCounter);
  el.className='placed'; el.setAttribute('data-id',id);
  el.style.left = (x - opts.w/2) + 'px'; el.style.top = (y - opts.h/2) + 'px';
  el.style.width = opts.w + 'px'; el.style.height = opts.h + 'px';
  el.style.transform = `rotate(${opts.rot}deg)`;
  el.setAttribute('data-scale','1');
  el.setAttribute('data-rot',opts.rot);
  el.innerHTML = getGlyphForType(type);
  makeInteractive(el);
  scene.appendChild(el);
}

function getGlyphForType(type){
  switch(type){
    case 'ornament': return '<div style="font-size:48px;text-align:center;line-height:1">üéÑ</div>';
    case 'star': return '<div style="font-size:56px;text-align:center;line-height:1">‚≠ê</div>';
    case 'gift': return '<div style="font-size:56px;text-align:center;line-height:1">üéÅ</div>';
    case 'penguin': return '<div style="font-size:56px;text-align:center;line-height:1">üêß</div>';
    case 'snowman': return '<div style="font-size:56px;text-align:center;line-height:1">‚õÑ</div>';
    case 'candy': return '<div style="font-size:48px;text-align:center;line-height:1">üç¨</div>';
    case 'heart': return '<div style="font-size:48px;text-align:center;line-height:1">üíñ</div>';
    case 'bell': return '<div style="font-size:48px;text-align:center;line-height:1">üîî</div>';
    default: return '<div style="font-size:56px;text-align:center;line-height:1">‚ú®</div>';
  }
}

// Make placed items draggable around inside the scene and interactive
function makeInteractive(el){
  // drag to move
  let isDown=false, startX=0, startY=0, origX=0, origY=0;
  el.addEventListener('pointerdown',(ev)=>{
    el.setPointerCapture(ev.pointerId);
    isDown=true; startX=ev.clientX; startY=ev.clientY;
    origX = parseFloat(el.style.left); origY = parseFloat(el.style.top);
    el.style.transition='none';
  });
  window.addEventListener('pointermove',(ev)=>{ if(!isDown) return; const dx=ev.clientX-startX; const dy=ev.clientY-startY; el.style.left = (origX+dx)+'px'; el.style.top = (origY+dy)+'px'; });
  window.addEventListener('pointerup',(ev)=>{ if(!isDown) return; isDown=false; el.style.transition='transform 120ms ease'; playClickSound(); });

  // double click to spin
  el.addEventListener('dblclick',()=>{
    const current = parseFloat(el.getAttribute('data-rot')||0);
    const next = current + 360; el.style.transform = `rotate(${next}deg)`; el.setAttribute('data-rot',next);
    playHappyChord();
  });

  // wheel to scale
  el.addEventListener('wheel',(ev)=>{
    ev.preventDefault(); const dir = Math.sign(ev.deltaY)*-1; const cur = parseFloat(el.getAttribute('data-scale')||1); let next = Math.min(2.4,Math.max(0.5, cur + dir*0.08)); el.setAttribute('data-scale',next); el.style.transform = `scale(${next}) rotate(${el.getAttribute('data-rot')||0}deg)`; playTone(440 + next*80,0.06);
  });

  // click to play small sound and wiggle
  el.addEventListener('click',(ev)=>{ ev.stopPropagation(); el.animate([{transform:el.style.transform+' scale(1.06)'},{transform:el.style.transform+' scale(0.96)'},{transform:el.style.transform+' scale(1)'}],{duration:280}); playClickSound(); });

  // long press to remove (for kids we show a little shake + pop)
  let pressTimer=null;
  el.addEventListener('pointerdown',(ev)=>{ pressTimer = setTimeout(()=>{popRemove(el);},900);});
  el.addEventListener('pointerup',()=>{ clearTimeout(pressTimer);});
}

function popRemove(el){ el.animate([{transform: 'scale(1)'},{transform:'scale(1.3)'},{transform:'scale(0)'}],{duration:420,easing:'cubic-bezier(.2,.8,.2,1)'}); playTone(200,0.28); setTimeout(()=>el.remove(),320); }

// Clear items
document.getElementById('clearBtn').addEventListener('click', ()=>{
  // remove all placed except the default ones we can tag by data-id numeric <100
  const placed = Array.from(scene.querySelectorAll('.placed'));
  for(const p of placed){ const id = p.getAttribute('data-id')||''; if(!id.startsWith('placed-1') && !id.startsWith('placed-2') && !id.startsWith('placed-3')) p.remove(); }
  playClearSound();
});

// confetti surprise - canvas-based quick particles
const confettiBtn = document.getElementById('confettiBtn');
confettiBtn.addEventListener('click', ()=>{ launchConfetti(); playHappyChord(); });
function launchConfetti(){
  const cvs = document.createElement('canvas');
  cvs.style.position='absolute'; cvs.style.left=0; cvs.style.top=0; cvs.width = scene.clientWidth; cvs.height = scene.clientHeight; scene.appendChild(cvs);
  const ctx = cvs.getContext('2d');
  const particles = [];
  for(let i=0;i<80;i++){ particles.push({x:Math.random()*cvs.width,y:Math.random()*-cvs.height, vx:(Math.random()-0.5)*4, vy:Math.random()*4+1, size:4+Math.random()*6, color:['#ff6b81','#ffd166','#6bf2ff','#b6ffb3'][Math.floor(Math.random()*4)], rot:Math.random()*Math.PI}); }
  let t=0; const id = setInterval(()=>{ t++; ctx.clearRect(0,0,cvs.width,cvs.height); for(const p of particles){ p.x+=p.vx; p.y+=p.vy; ctx.save(); ctx.translate(p.x,p.y); ctx.rotate(p.rot); ctx.fillStyle=p.color; ctx.fillRect(-p.size/2,-p.size/2,p.size,p.size*0.6); ctx.restore(); p.rot += 0.08; }
    if(t>140){ clearInterval(id); cvs.remove(); }
  },16);
}

// Snow generator - spawns unicode snowflakes with varied speed
function spawnSnow(){ const count = 14; for(let i=0;i<count;i++){ const f = document.createElement('div'); f.className='snowflake'; f.style.left = Math.random()*scene.clientWidth+'px'; f.style.fontSize = (12+Math.random()*28)+'px'; f.style.opacity = 0.6 + Math.random()*0.4; f.textContent = ['‚ùÑÔ∏è','‚úº','‚ùÖ'][Math.floor(Math.random()*3)]; scene.appendChild(f);
    const duration = 6000 + Math.random()*9000; const sway = (Math.random()*120)-60; f.animate([{transform:`translateY(0px) translateX(0px) rotate(0deg)`},{transform:`translateY(${scene.clientHeight+60}px) translateX(${sway}px) rotate(${360*(Math.random()*2-1)}deg)`}],{duration:duration,iterations:1,easing:'linear'});
    setTimeout(()=>{ f.remove(); }, duration+120);
  }
}
setInterval(spawnSnow, 900);
spawnSnow();

// let clicking background play tiny jingle + small snow burst
scene.addEventListener('click',()=>{ playTone(480,0.08); for(let i=0;i<6;i++){ setTimeout(()=>spawnSnow(), i*80); } });

// accessibility: keyboard placement via numbers 1-8 (quick add)
window.addEventListener('keydown',(ev)=>{
  if(document.activeElement && (document.activeElement.tagName==='INPUT' || document.activeElement.tagName==='TEXTAREA')) return;
  const map = { '1':'ornament','2':'star','3':'gift','4':'penguin','5':'snowman','6':'candy','7':'heart','8':'bell' };
  if(ev.key in map){ placeItem(map[ev.key], scene.clientWidth/2, scene.clientHeight/2); playDropSound(); }
});

// make sure existing default placed are interactive
document.querySelectorAll('.placed').forEach(makeInteractive);

// Responsive: when scene resizes, ensure snow continues to spawn inside
window.addEventListener('resize', ()=>{/* nothing heavy - spawnSnow reads clientHeight */});

// small onboarding animation: bounce the header
const header = document.querySelector('.card-header'); header.animate([{transform:'translateY(-6px)'},{transform:'translateY(0px)'}],{duration:900,iterations:1});

</script>
</body>
</html>
